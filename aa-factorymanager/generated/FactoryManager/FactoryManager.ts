// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FactoryCreated extends ethereum.Event {
  get params(): FactoryCreated__Params {
    return new FactoryCreated__Params(this);
  }
}

export class FactoryCreated__Params {
  _event: FactoryCreated;

  constructor(event: FactoryCreated) {
    this._event = event;
  }

  get factoryId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get factoryAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FactoryManager extends ethereum.SmartContract {
  static bind(address: Address): FactoryManager {
    return new FactoryManager("FactoryManager", address);
  }

  ENTRY_POINT_ADDRESS(): Address {
    let result = super.call(
      "ENTRY_POINT_ADDRESS",
      "ENTRY_POINT_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ENTRY_POINT_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ENTRY_POINT_ADDRESS",
      "ENTRY_POINT_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factories(param0: BigInt): Address {
    let result = super.call("factories", "factories(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_factories(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("factories", "factories(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factoryMap(param0: BigInt): Address {
    let result = super.call("factoryMap", "factoryMap(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_factoryMap(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("factoryMap", "factoryMap(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFactories(): Array<Address> {
    let result = super.call("getFactories", "getFactories():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getFactories(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getFactories",
      "getFactories():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class AddStakeCall extends ethereum.Call {
  get inputs(): AddStakeCall__Inputs {
    return new AddStakeCall__Inputs(this);
  }

  get outputs(): AddStakeCall__Outputs {
    return new AddStakeCall__Outputs(this);
  }
}

export class AddStakeCall__Inputs {
  _call: AddStakeCall;

  constructor(call: AddStakeCall) {
    this._call = call;
  }

  get factoryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get unstakeDelaySec(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddStakeCall__Outputs {
  _call: AddStakeCall;

  constructor(call: AddStakeCall) {
    this._call = call;
  }
}

export class CreateFactoryCall extends ethereum.Call {
  get inputs(): CreateFactoryCall__Inputs {
    return new CreateFactoryCall__Inputs(this);
  }

  get outputs(): CreateFactoryCall__Outputs {
    return new CreateFactoryCall__Outputs(this);
  }
}

export class CreateFactoryCall__Inputs {
  _call: CreateFactoryCall;

  constructor(call: CreateFactoryCall) {
    this._call = call;
  }
}

export class CreateFactoryCall__Outputs {
  _call: CreateFactoryCall;

  constructor(call: CreateFactoryCall) {
    this._call = call;
  }
}
